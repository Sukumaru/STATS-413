test_MSE_2
##For the third model
model_3<-lm(Price ~ WinterRain + AGST + HarvestRain + Age,data=winetrain)
pred_train_3<--predict(model_3,winetrain)
train_MSE_3<-mean((winetrain$Price-pred_train_3)^2)
pred_test_3<-predict(model_3,winetest)
test_MSE_3 <- mean((winetest$Price-pred_test_3)^2)
train_MSE_3
test_MSE_3
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggthemes)
library(corrplot)
library(RColorBrewer)
library(tidyverse)
library(GGally)
library(alr3)
library(caret)
library(class)
library(MASS)
library("ggpubr")
stars<-read.csv("stars.csv")
set.seed(2020)
train_id <- sample(nrow(stars), size = floor(0.8*nrow(stars)))
train_data <- stars[train_id,]
test_data<-stars[-train_id,]
library(caret)
# define training control
train_control<- trainControl(method="cv", number=5)
# set the range for k
k_range = data.frame( k =c(1, 2, 3, 4, 5, 10, 20, 50, 80, 100))
# train the model
res_CV_KNN <- train(StarColor ~ Luminosity + AbsoluteMagnitude +Radius,
method     = "knn",
preProcess = c("center","scale"), #standardization
tuneGrid   = k_range,
trControl  = train_control,
metric     = "Accuracy",
data       = train_data)
# train the model
res_CV_KNN <- train(StarColor ~ Luminosity + AbsoluteMagnitude +Radius,
method     = "knn",
preProcess = c("center","scale"), #standardization
tuneGrid   = k_range,
trControl  = train_control,
metric     = "Accuracy",
data       = train_data)
# The best model
res_CV_KNN$bestTune
# Printing the results
print(res_CV_KNN)
stars<-read.csv("stars.csv")
set.seed(2020)
train_id <- sample(nrow(stars), size = floor(0.8*nrow(stars)))
train_data <- stars[train_id,]
test_data<-stars[-train_id,]
library(caret)
# define training control
train_control<- trainControl(method="cv", number=5)
# set the range for k
k_range = data.frame( k =c(1, 2, 3, 4, 5, 10, 20, 50, 80, 100))
# train the model
res_CV_KNN <- train(StarColor ~ Luminosity + AbsoluteMagnitude +Radius,
method     = "knn",
preProcess = c("center","scale"), #standardization
tuneGrid   = k_range,
trControl  = train_control,
metric     = "Accuracy",
data       = train_data)
# The best model
res_CV_KNN$bestTune
# Printing the results
print(res_CV_KNN)
# define training control
train_control<- trainControl(method="cv", number=5)
# set the range for k
k_range = data.frame( k =c(1, 2, 3, 4, 5, 10, 20, 50, 80, 100))
# train the model
res_CV_KNN <- train(StarColor ~ Luminosity + AbsoluteMagnitude +Radius,
method     = "knn",
preProcess = c("center","scale"), #standardization
tuneGrid   = k_range,
trControl  = train_control,
metric     = "Accuracy",
data       = train_data)
# train the model
res_CV_KNN <- train(StarColor ~ Luminosity + AbsoluteMagnitude +Radius,
method     = "knn",
preProcess = c("center","scale"), #standardization
tuneGrid   = k_range,
trControl  = train_control,
metric     = "Accuracy",
data       = train_data)
# The best model
res_CV_KNN$bestTune
# Printing the results
print(res_CV_KNN)
testX = as.matrix(test_data[c("Luminosity","AbsoluteMagnitude","Radius")])
trainX = as.matrix(train_data[c("Luminosity","AbsoluteMagnitude","Radius")])
knn.pred = knn(train = trainX, test = testX, cl = train_data$StarColor, k=20)
knnTestErr = mean(knn.pred != test_data$StarColor)
knnTestErr
train_data$StarColor <-as.factor(train_data$StarColor)
test_data$StarColor<-as.factor(test_data$StarColor)
logistic_model <- glm(StarColor ~ Luminosity + AbsoluteMagnitude +Radius, data = train_data, family = binomial)
logistic.pred = predict(logistic_model, test_data)
predProbs = binomial()$linkinv(logistic.pred)
# Create a vector of all "Down"s (we'll replace the entries that should be
# classified as "Red" in the next step)
testPrediction = rep("Blue", nrow(test_data))
# Replace "Blue" with "Red" if the predicted probability is greater than .5
testPrediction[predProbs > .5] = "Red"
table(testPrediction, test_data$StarColor, dnn = c("Predicted", "Actual"))
logisticTestErr=round(mean(testPrediction != test_data$StarColor), 2)
logisticTestErr
table(testPrediction, test_data$StarColor, dnn = c("Predicted", "Actual"))
logisticTestErr=round(mean(testPrediction != test_data$StarColor), 2)
logisticTestErr
new.star <- data.frame(
Radius = 1200,
Luminosity = 21369,
AbsoluteMagnitude = 7
)
newStarX = as.matrix(new.star[c("Luminosity","AbsoluteMagnitude","Radius")])
knn.pred_2 = knn(train = trainX, test = newStarX, cl = train_data$StarColor, k=20)
knn.pred_2 #Blue
logistic.pred_2 = predict(logistic_model, new.star)
predProbs_2 = binomial()$linkinv(logistic.pred_2)
testPrediction_2 = rep("Blue", nrow(new.star))
testPrediction_2[predProbs_2 > .5] = "Red"
testPrediction_2 #Red
knn.pred_2 #Blue
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggthemes)
library(corrplot)
library(RColorBrewer)
library(tidyverse)
library(GGally)
library(alr3)
library(MASS)
library(mvtnorm)
library(caret)
library(class)
library(ISLR)
data(salary)
data(salary)
head(salary)
pairs(salary)
help(pairs)
pairs(salary[,c(1:2,4:6)])
colors <- c('black', 'red')[unclass(sex)]
pairs(salary[,c(1:2,4:6)],col = c("red", "cornflowerblue")[sex])
pairs(salary[,c(1:6)],col = c("red", "cornflowerblue")[sex])
pairs(salary[,c(1:6)],col = c("red", "cornflowerblue")[salary$sex])
pairs(salary[,c(1:2)],col = c("red", "cornflowerblue")[salary$sex])
pairs(salary[,c(1:2)])
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$ == 1] <- "blue"
cols[salary$sex == 1] <- "blue"
cols[salary$sex == 0] <- "red"
pairs(salary[,c(1:2)],col = cols)
pairs(salary,col = cols)
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == 1] <- "blue"
cols[salary$sex == 0] <- "red"
pairs(salary,col = cols)
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == "1"] <- "blue"
cols[salary$sex == "0"] <- "red"
pairs(salary,col = cols)
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "blue"
cols[salary$Sex == 0] <- "red"
pairs(salary,col = cols)
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "blue"
cols[salary$Sex == 0] <- "red"
pairs(salary[,c(1:2,4:6)],col = cols)
head(salary)
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "blue"
cols[salary$Sex == 0] <- "red"
pairs(salary[,c(1:2,4:6)],col = cols)
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:2,4:6)],col = cols)
pairs(salary[,c(1:2,4:6)],col = cols, main = "Scatter plot of the salary data")
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:2,4:6)],col = cols, main = "Scatter plot of the salary data",legend ="1")
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:2,4:6)],col = cols, main = "Scatter plot of the salary data")
data(salary)
head(salary)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
summary(m0 <- lm(salary ~ sex, salary))$coef
summary(m0 <- lm(salary ~ Sex, salary))$coef
salary<-as.data.frame(salary)
summary(lm(Salary~Sex,data= salary))
model1<-lm(Salary~.,data= salary)
confint(model1)["sexFemale", , drop=FALSE]
confint(model1)["SexFemale", , drop=FALSE]
nidek1
summary(model1)
data(Salary)
data(Salary)
data(Salary)
data(salary)
salary$Sex<-as.factor(salary$Sex)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
```{r}
salary<-as.data.frame(salary)
summary(lm(Salary~Sex,data= salary))
model1<-lm(Salary~.,data= salary)
summary(model1)
confint(model1)["Sex1", , drop=FALSE]
model1<-lm(Salary~.-rank,data= salary)
summary(model1)'
summary(model1)
confint(model1)["Sex1", , drop=FALSE]
model1<-lm(Salary~.,data= salary)
summary(model1)
confint(model1)["Sex1", , drop=FALSE]
data(salary)
salary$Sex<-as.factor(salary$Sex)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-as.data.frame(salary)
summary(lm(Salary~Sex,data= salary))
model1<-lm(Salary~.,data= salary)
summary(model1)
confint(model1)["Sex1", , drop=FALSE]
model2<-lm(Salary~.-Rank,data= salary)
summary(model1)
data(salary)
salary$Sex<-as.factor(salary$Sex)
salary$Degree<-as.factor(salary$Degree)
salary$Rank<-as.factor(salary$Rank)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-as.data.frame(salary)
summary(lm(Salary~Sex,data= salary))
model1<-lm(Salary~.,data= salary)
summary(model1)
confint(model1)["Sex1", , drop=FALSE]
model2<-lm(Salary~.-Rank,data= salary)
summary(model1)
model2<-lm(Salary~.-Rank,data= salary)
summary(model2)
setwd("C:/Users/sakun/Desktop/STATS 413/Assignments/hw4")
salary<-read.csv("salary.csv")
salary$Sex<-as.factor(salary$Sex)
salary<-read.csv("salary.csv")
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-read.csv("salary.csv")
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary,col = cols, main = "Scatter plot of the salary data")
salary<-read.csv("salary.csv")
salary$Sex<-as.factor(salary$Sex)
salary<-read.csv("salary.csv")
salary$Degree<-as.numeric(salary$Degree)
salary<-read.csv("salary.csv")
salary$degree<-as.numeric(salary$Degree)
salary<-read.csv("salary.csv")
salary$degree<-as.numeric(salary$Degree)
salary<-read.csv("salary.csv")
salary$degree<-as.numeric(salary$Degree)
salary<-read.csv("salary.csv")
salary$degree<-as.numeric(salary$Degree)
salary<-read.csv("salary.csv")
salary$degree<-as.numeric(salary$Degree)
salary<-read.csv("salary.csv")
salary$degree<-as.numeric(salary$Degree)
salary<-read.csv("salary.csv")
salary$degree<-as.numeric(salary$Degree)
salary<-read.csv("salary.csv")
salary$degree<-as.numeric(salary$degree)
salary$rank<-as.numeric(salary$rank)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == "female"] <- "red"
cols[salary$sex == "male"] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-read.csv("salary.csv")
salary$sex<-as.numeric(salary$sex)
salary$degree<-as.numeric(salary$degree)
salary$rank<-as.numeric(salary$rank)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == "female"] <- "red"
cols[salary$sex == "male"] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-read.csv("salary.csv")
salary$sex<-as.numeric(salary$sex)
salary$degree<-as.numeric(salary$degree)
salary$rank<-as.numeric(salary$rank)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == "female"] <- "red"
cols[salary$sex == "male"] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-read.csv("salary.csv")
salary$sex<-as.numeric(salary$sex)
salary$degree<-as.numeric(salary$degree)
salary$rank<-as.numeric(salary$rank)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == "female"] <- "red"
cols[salary$sex == "male"] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-read.csv("salary.csv")
salary$sex<-as.numeric(salary$sex)
salary$degree<-as.numeric(salary$degree)
salary$rank<-as.numeric(salary$rank)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == "female"] <- "red"
cols[salary$sex == "male"] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-read.csv("salary.csv")
salary$sex<-as.numeric(salary$sex)
salary$degree<-as.numeric(salary$degree)
salary$rank<-as.numeric(salary$rank)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == "female"] <- "red"
cols[salary$sex == "male"] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary$sex<-as.numeric(salary$sex)
salary<-read.csv("salary.csv")
salary$sex<-as.numeric(salary$sex)
salary$degree<-as.numeric(salary$degree)
salary$rank<-as.numeric(salary$rank)
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$sex == "female"] <- "red"
cols[salary$sex == "male"] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
data("salary")
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == "female"] <- "red"
cols[salary$Sex == "male"] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
data("salary")
cols <- character(nrow(salary))
cols[] <- "black"
cols[salary$Sex == 1] <- "red"
cols[salary$Sex == 0] <- "blue"
pairs(salary[,c(1:6)],col = cols, main = "Scatter plot of the salary data")
salary<-read.csv("salary.csv")
salary<-as.data.frame(salary)
summary(lm(Salary~Sex,data= salary))
salary<-read.csv("salary.csv")
salary<-as.data.frame(salary)
summary(lm(salary~sex,data= salary))
model1<-lm(salary~.,data= salary)
summary(model1)
confint(model1)["Sex1", , drop=FALSE]
model1<-lm(salary~.,data= salary)
summary(model1)
confint(model1)["sexFemale", , drop=FALSE]
model1<-lm(salary~.,data= salary)
summary(model1)
confint(model1)["sexMale", , drop=FALSE]
model2<-lm(Salary~.-Rank,data= salary)
model2<-lm(Salary~.-rank,data= salary)
model2<-lm(salary~.-rank,data= salary)
summary(model2)
model2<-lm(salary~.-rank,data= salary)
summary(model2)
water<-read.csv("water.csv")
pairs(water)
water<-read.csv("water.csv")
cor(water)
pairs(water)
summary(ans <- powerTransform( as.matrix(water[ , 2:7]) ~ 1))
summary(powerTransform( as.matrix(water[ , 2:7]) ~ 1))
summary(ans <- powerTransform( as.matrix(water[ , 2:7]) ~ 1))
summary(ans <- powerTransform( as.matrix(water[ , 3:8]) ~ 1))
water<-read.csv("water.csv")
cor(water)
pairs(water[ , 2:9])
pairs(log(water[ , 3:9]))
model3 <- lm(BSAAM ~ log(APMAM) + log(APSAB) + log(APSLAKE) +
log(OPBPC) + log(OPRC) + log(OPSLAKE), water)
invResPlot(model3)
model3 <- lm(BSAAM ~ log(APMAM) + log(APSAB) + log(APSLAKE) + log(OPBPC) + log(OPRC) + log(OPSLAKE), water)
invResPlot(model3)
model3 <- lm(BSAAM ~ log(APMAM) + log(APSAB) + log(APSLAKE) + log(OPBPC) + log(OPRC) + log(OPSLAKE), water)
invResPlot(model3)
model4 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) + log(OPBPC) + log(OPRC) + log(OPSLAKE), water)
model4 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) + log(OPBPC) + log(OPRC) + log(OPSLAKE), water)
summary(model4)
water$geometricmean<-rowSums(water[,6:8])/3
water$geometricmean_O<-rowSums(water[,6:8])/3
model4 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +geometricmean_O , water)
model4 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) + log(OPBPC) + log(OPRC) + log(OPSLAKE), water)
summary(model4)
water$geometricmean_O<-rowSums(water[,6:8])/3
model5 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +geometricmean_O , water)
anova(model4,model5)
water$geometricmean_O<-rowSums(water[,6:8])
model5 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +geometricmean_O , water)
anova(model4,model5)
model4 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) + log(OPBPC) + log(OPRC) + log(OPSLAKE), water)
summary(model4)
water$geometricmean_O<-rowSums(water[,6:8])
model5 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +geometricmean_O , water)
anova(model4,model5)
water$geometricmean_O<-rowSums(water[,6:8])/3
model5 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +geometricmean_O , water)
anova(model4,model5)
water$geometricmean_O<-rowSums(water[,6:8])/3
model5 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +geometricmean_O , water)
anova(model5,model4)
model4 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) + log(OPBPC) +
log(OPRC) + log(OPSLAKE), water)
summary(model4)
water$geometricmean_O<-rowSums(water[,6:8])/3
model5 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +geometricmean_O , water)
anova(model5,model4)
model4 <- lm(formula = log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +
log(OPBPC) + log(OPRC) + log(OPSLAKE), data = water)
summary(model4)
water$geometricmean_O<-rowSums(water[,6:8])/3
model5 <- lm(log(BSAAM) ~ log(APMAM) + log(APSAB) + log(APSLAKE) +geometricmean_O , water)
anova(model5,model4)
water$geometricmean_A<-rowSums(water[,3:5])/3
model6 <- lm(log(BSAAM) ~ log(OPBPC) + log(OPRC) + log(OPSLAKE) +geometricmean_A , water)
anova(model6,model4)
library(data.table)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggthemes)
library(corrplot)
library(RColorBrewer)
library(tidyverse)
library(MASS)
library(mvtnorm)
library(ISLR)
data(Carseats)
model1<-lm(Sales~Price+Urban+Us, data="Carseats")
library(ISLR)
data(Carseats)
model1<-lm(Sales~Price+Urban+Us, data=Carseats)
library(ISLR)
data(Carseats)
model1<-lm(Sales~Price+Urban+US, data=Carseats)
library(ISLR)
data(Carseats)
model1<-lm(Sales~Price+Urban+US, data=Carseats)
summary(model1)
