cv.err3$delta
fit4 <- glm(y ~ x + x2 + x3 + x4, data=df)
cv.err4 <- cv.glm(df, fit4)
cv.err4$delta
fit0 <- lm(y ~ poly(x,4))
summary(fit0)
\section{Exercise 9}
__Part a)__
data(Boston)
(medv.mu <- mean(Boston$medv))
set.seed(1)
mean.fn <- function(var, id) {
return(mean(var[id]))
}
(boot.res <- boot(Boston$medv, mean.fn, R=100))
set.seed(1)
mean.fn <- function(var, id) {
return(mean(var[id]))
}
boot.res <- boot(Boston$medv, mean.fn, R=200)
set.seed(1)
mean.fn <- function(var, id) {
return(mean(var[id]))
}
boot.res <- boot(Boston$medv, mean.fn, R=200)
boot.res <- boot(Boston$medv, mean.fn, R=200)
boot.res
sd <- sd(Boston$medv)/sqrt(nrow(Boston))
sd
mu
mu <- mean(Boston$medv)
data(Boston)
mu <- mean(Boston$medv)
mu
boot.res$t0 - 2*sd(boot.res$t)  # lower bound
boot.res$t0 + 2*sd(boot.res$t)  # upper bound
t.test(Boston$medv)
median <- median(Boston$medv)
median
set.seed(1)
median.fn <- function(var, id) {
return(median(var[id]))
}
(boot.res <- boot(Boston$medv, median.fn, R=100))
set.seed(1)
median.fn <- function(var, id) {
return(median(var[id]))
}
boot.res <- boot(Boston$medv, median.fn, R=100)
boot.res
set.seed(1)
quantile10.fn <- function(var, id) {
return(quantile(var[id], 0.1))
}
(boot.res <- boot(Boston$medv, quantile10.fn, R=100))
mu0.1 <- quantile(Boston$medv, 0.1)
mu0.1
set.seed(1)
quantile10 <- function(var, id) {
return(quantile(var[id], 0.1))
}
(boot.res <- boot(Boston$medv, quantile10, R=100))
mu0.1 <- quantile(Boston$medv, 0.1)
mu0.1
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggthemes)
library(corrplot)
library(RColorBrewer)
library(tidyverse)
library(GGally)
library(alr3)
library(caret)
library(class)
library(MASS)
library("ggpubr")
library(boot)
library(broom)
data(crabs)
data(crabs)
head(crabs)
set.seed(6789)
inTrain <- createDataPartition(College$Accept.Apps, p = 0.8, list = FALSE)
head(crabs)
data(crabs)
head(crabs)
set.seed(6789)
inTrain <- createDataPartition(p = 0.8, list = FALSE)
head(crabs)
data(crabs)
head(crabs)
set.seed(6789)
inTrain <- createDataPartition(College$index, p = 0.8, list = FALSE)
head(crabs)
set.seed(6789)
head(crabs)
inTrain <- createDataPartition(crabs$index, p = 0.8, list = FALSE)
data(crabs)
head(crabs)
set.seed(6789)
inTrain <- createDataPartition(crabs$index, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
data(crabs)
head(crabs)
set.seed(6789)
inTrain <- createDataPartition(crabs$index, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
data(crabs)
head(crabs)
set.seed(6789)
inTrain <- createDataPartition(crabs$sex, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
data(crabs)
head(crabs)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
library(tree)
install.packages("tree")
library(tree)
library(tree)
tree.crabs=tree(sp~.-index, tree)
library(tree)
tree.crabs=tree(sp~.-index, crabs)
library(tree)
tree.crabs=tree(sp~.-index, crabs)
# plot the classification tree
plot(tree.crabs)
text(tree.crabs,pretty=0,cex=0.5)
library(tree)
set.seed(10)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
# plot the classification tree
plot(tree.crabs)
text(tree.crabs,pretty=0,cex=0.5)
cv.crabs
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=0)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=0)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=10)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=100)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=0)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=0)
#predicition
tree.pred=predict(prune.crabs,testing,type="class")
table(tree.pred,testing$sp)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=0)
#prediction
tree.pred=predict(prune.crabs,testing,type="class")
table(tree.pred,testing$sp)
table(tree.pred,testing$sp)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#plot
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=0)
#test error
tree.pred=predict(prune.crabs,testing,type="class")
table(tree.pred,testing$sp)
test.err<-(18+17)/40
#test error
tree.pred=predict(prune.crabs,testing,type="class")
table(tree.pred,testing$sp)
(test.err<-(18+17)/40)
#train error
tree.pred_train=predict(prune.crabs,training,type="class")
table(tree.pred_train,training$sp)
#train error
tree.pred_train=predict(prune.crabs,training,type="class")
table(tree.pred_train,training$sp)
(test.err<-(2+2)/160)
library(tree)
set.seed(10)
tree.crabs=tree(sp~. -index, training)
cv.crabs=cv.tree(tree.crabs,FUN=prune.misclass)
names(cv.crabs)
cv.crabs
par(mfrow=c(1,2))
plot(cv.crabs$size,cv.crabs$dev / length(train),ylab="cv error", xlab="size",type="b")
plot(cv.crabs$k, cv.crabs$dev / length(train),ylab="cv error", xlab="k",type="b")
#test error
tree.pred=predict(prune.crabs,testing,type="class")
table(tree.pred,testing$sp)
(test.err<-(3+2)/40)
install.packages("randomForest")
library(randomForestï¼‰
library(randomForest)
help("randomForest")
library(randomForest)
rf.crabs=randomForest(sp~.-index,data=crabs,subset=inTrain,mtry = 5,importance=TRUE)
#importance plot
varImpPlot(rf.crabs)
#importance plot
varImpPlot(rf.crabs)
plot(prune.crabs)
text(prune.crabs,pretty=0)
prune.crabs=prune.misclass(tree.crabs,best=10)
plot(prune.crabs)
text(prune.crabs,pretty=0)
#train error
rf.train_err = predict(rf.crabs, training$sp)
#train error
rf.train_err = predict(rf.crabs, training)
#train error
rf.train = predict(rf.crabs, training)
#train error
rf.train_pred = predict(rf.crabs, training)
table(tree.pred,testing$sp)
#train error
rf.train_pred = predict(rf.crabs, training)
table(train_pred,training$sp)
#train error
rf.train_pred = predict(rf.crabs, training)
table(rf.train_pred,training$sp)
#test error
rf.test_pred = predict(rf.crabs, testing)
table(rf.test_pred,testing$sp)
#train error
rf.train_pred = predict(rf.crabs, training)
table(rf.train_pred,training$sp)
(train.err<-(0+0)/160)
#test error
rf.test_pred = predict(rf.crabs, testing)
table(rf.test_pred,testing$sp)
(test.err<-(5+2)/40)
adaboost.fit = gbm(sp~.-index, data = training , distribution="adaboost", n.trees=1000)
help(gbm)
??gbm
help("gbm")
library(gbm)
install.packages("gbm")
library(gbm)
library(gbm)
adaboost.fit = gbm(sp~.-index, data = training , distribution="adaboost", n.trees=1000)
library(gbm)
Carseats$sp01 = ifelse(Carseats$sp=="B", 1, 0)
library(gbm)
Carseats$sp01 = ifelse(Carseats$sp==B, 1, 0)
library(gbm)
Carseats$sp01 = ifelse(Carseats$sp=="B", 1, 0)
library(gbm)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
adaboost.fit = gbm(sp01~.-index-sp, data = training , distribution="adaboost", n.trees=1000)
library(gbm)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
adaboost.fit = gbm(sp01~.-index-sp, data = crabs , distribution="adaboost", n.trees=1000)
library(gbm)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
adaboost.fit = gbm(sp01~.-index-sp, data = training , distribution="adaboost", n.trees=1000)
#rain error
probs.adaboost = predict(adaboost.fit, training, n.trees = 1000, type = 'response')
pred.adaboost = ifelse(probs.adaboost > 0.5, 1, 0)
train_err = mean(pred.adaboost!=training$sp01)
print(train_err)
#test error
probs.adaboost = predict(adaboost.fit, testing, n.trees = 1000, type = 'response')
pred.adaboost = ifelse(probs.adaboost > 0.5, 1, 0)
test_err = mean(pred.adaboost!=testing$sp01)
print(test_err)
library(gbm)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index-sp, data = training, v = 10, boos = TRUE, mfinal = 1000,
coeflearn = "Breiman", par=FALSE)
library(adabag)
install.packages(adabag)
install.packages(a"adabag")
install.packages("adabag")
library(gbm)
library(adabag)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index-sp, data = training, v = 10, boos = TRUE, mfinal = 1000,
coeflearn = "Breiman", par=FALSE)
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index-sp, data = training, v = 10, mfinal = 1000)
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index-sp, data = training, v = 10, mfinal = 100\0,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index-sp, data = training, v = 10, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index-sp, data = crabs v = 10, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index-sp, data = crabs, v = 10, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index-sp, data = training, v = 10, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index,-sp, data = training, v = 10, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index, data = training, v = 10, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp01~.-index, data = training, v = 10, mfinal = 1000)
data(iris)
iris.boostcv <- boosting.cv(Species ~ ., v=2, data=iris, mfinal=5,
control=rpart.control(cp=0.01))
iris.boostcv
crabs.boostcv<-boosting.cv(sp~.-index,-sp01,data = training, v = 10, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp~.-index-sp01,data = training, v = 10, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp~.-index-sp01,data = training, v = 2, mfinal = 1000,control=rpart.control(cp=0.01))
library(gbm)
library(adabag)
crabs$sp01 = ifelse(crabs$sp=="B", 1, 0)
set.seed(6789)
inTrain <- createDataPartition(crabs$sp01, p = 0.8, list = FALSE)
training <- crabs[inTrain,]
testing <- crabs[-inTrain,]
crabs.boostcv<-boosting.cv(sp~.-index-sp01,data = training, v = 5, mfinal = 1000)
adaboost.fit = gbm(sp01~.-index-sp, data = training , distribution="adaboost", n.trees=1000)
